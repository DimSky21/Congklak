package{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class Main extends MovieClip	{		private var startPage:StartPage;		private var playPage:PlayPage;		private var gameOverPage:GameOverPage;		private var pickedShell:uint;		private var holeArray:Array;		private var playersTurn:Boolean;		private var indexArray:uint;		private var isTurn:Boolean;		private var isWin:uint;		private var isAI:Boolean;				public function Main()		{			init();		}				public function init():void		{			startPage = new StartPage;			playPage = new PlayPage;			gameOverPage = new GameOverPage;			addChild(startPage);						playersTurn = true;			isTurn = false;			isAI = false;			holeArray = [7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,0];						for (var i:int = 0; i < holeArray.length; i++)			{				playPage["playerHole" + i].shell.text = holeArray[i];				playPage["playerHole" + i].holeNumber = i;				playPage["playerHole" + i].mouseChildren = false;				//trace(playPage["playerHole" + i].shell.text);			}			onChangeTurn();						startPage.startButton.addEventListener(MouseEvent.MOUSE_DOWN, onStartButtonClick);			playPage.backToMainMenuButton.addEventListener(MouseEvent.MOUSE_DOWN, onBackToMainMenuButtonClick);			//playPage.winButton.addEventListener(MouseEvent.MOUSE_DOWN, onWinButtonClick);//			playPage.loseButton.addEventListener(MouseEvent.MOUSE_DOWN, onLoseButtonClick);			playPage.winButton.visible = false;			playPage.loseButton.visible = false;			//playPage.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage); //			gameOverPage.backToMainMenuButton.addEventListener(MouseEvent.MOUSE_DOWN, onBackToMainMenuButtonClick);//			gameOverPage.playAgainButton.addEventListener(MouseEvent.MOUSE_DOWN, onStartButtonClick);			stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				private function onStartButtonClick(e:MouseEvent):void		{			removeChild(startPage);			addChild(playPage);						isAI = true;			onChangeTurn();						//trace(playPage["playerHole" + 0].shell.text);		}				private function onBackToMainMenuButtonClick(e:MouseEvent):void		{			removeChild(playPage);			addChild(startPage);		}				private function onEnterFrame(e:Event):void		{			if (stage.contains(playPage))			{				onChangeTurn();				disablePlayerHoleClick();				checkGameOver();			}		}				private function pickShell(e:MouseEvent):void		{			var distributeDelay:Timer;			var pickedHole = e.target as Hole;						isTurn = true;			indexArray = pickedHole.holeNumber;			pickedShell = holeArray[indexArray];			holeArray[indexArray] = 0;			playPage["playerHole" + indexArray].shell.text = holeArray[indexArray];						distributeDelay = new Timer(1000);			distributeDelay.addEventListener(TimerEvent.TIMER, onPickShell);			distributeDelay.start();		}				private function aiPickShell():void		{			var distributeDelay:Timer;			var holeIndex:uint;			while (true)			{				holeIndex = Math.round(Math.random() * 7) + 8;				if (holeArray[holeIndex] != 0)				{					break;				}			}						isTurn = true;			indexArray = holeIndex;			pickedShell = holeArray[indexArray];			holeArray[indexArray] = 0;			playPage["playerHole" + indexArray].shell.text = holeArray[indexArray];						distributeDelay = new Timer(1000);			distributeDelay.addEventListener(TimerEvent.TIMER, onPickShell);			distributeDelay.start();		}				private function onPickShell(e:TimerEvent):void		{			indexArray += 1;			if (indexArray >= holeArray.length)			{				indexArray -= 16;			}						if (indexArray == 7)			{				if (!playersTurn)				{					indexArray += 1;				}			}			else if (indexArray == 15)			{				if (playersTurn)				{					indexArray += 1;				}				if (indexArray >= holeArray.length)				{					indexArray -= 16;				}			}			holeArray[indexArray] += 1;			playPage["playerHole" + indexArray].shell.text = holeArray[indexArray];			pickedShell -= 1;			if (pickedShell == 0)			{				var distributeDelay:Timer = e.target as Timer;				isTurn = false;				if (indexArray == 7 || indexArray == 15)				{					distributeDelay.stop();					distributeDelay.removeEventListener(TimerEvent.TIMER, onPickShell);					distributeDelay = null;					if (!playersTurn && isAI)					{						aiPickShell();					}				}				else if (holeArray[indexArray] == 1)				{					distributeDelay.stop();					distributeDelay.removeEventListener(TimerEvent.TIMER, onPickShell);					distributeDelay = null;					if (playersTurn)					{						if (indexArray >= 0 && indexArray <= 6)						{							onShoot(indexArray, playersTurn);							playersTurn = !playersTurn;						}						else						{							playersTurn = !playersTurn;						}					}					else					{						if (indexArray >= 8 && indexArray <= 14)						{							onShoot(indexArray, playersTurn);							playersTurn = !playersTurn;						}						else						{							playersTurn = !playersTurn;						}					}					if (!playersTurn && isAI)					{						aiPickShell();					}				}				else				{					pickedShell = holeArray[indexArray];					holeArray[indexArray] = 0;					playPage["playerHole" + indexArray].shell.text = holeArray[indexArray];				}			}		}				/*private function onCompletePickShell(e:TimerEvent):void		{			var pickTimer:Timer = e.target as Timer;			pickTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onCompletePickShell);						trace(isTurn);		}*/				private function onShoot(shooterHole:uint, turn:Boolean):void		{			var tempShellCount:int;			var shootedHole:int;			shootedHole = 14 - shooterHole;			tempShellCount = holeArray[shootedHole] + holeArray[shooterHole];			//Empty shootedHole and shooterHole			holeArray[shootedHole] = 0;			playPage["playerHole" + shootedHole].shell.text = holeArray[shootedHole];			holeArray[shooterHole] = 0;			playPage["playerHole" + shooterHole].shell.text = holeArray[shooterHole];			if (turn)			{				holeArray[7] += tempShellCount;				playPage["playerHole" + 7].shell.text = holeArray[7];			}			else			{				holeArray[15] += tempShellCount;				playPage["playerHole" + 15].shell.text = holeArray[15];			}		}				private function onChangeTurn():void		{			var playerOneArray:uint;			var playerTwoArray:uint;			if (playersTurn)			{				playPage.messageDisplay.text = "Player 1 Turn";				playerOneArray = 0;				playerTwoArray = 8;			}			else			{				playPage.messageDisplay.text = "Player 2 Turn";				playerOneArray = 8;				playerTwoArray = 0;			}			for (var i:int = 0; i < 7; i++)			{				if (holeArray[playerOneArray] > 0)				{					playPage["playerHole" + playerOneArray].addEventListener(MouseEvent.MOUSE_DOWN, pickShell);					playPage["playerHole" + playerOneArray].buttonMode = true;				}				else				{					playPage["playerHole" + playerOneArray].removeEventListener(MouseEvent.MOUSE_DOWN, pickShell);					playPage["playerHole" + playerOneArray].buttonMode = false;				}				playPage["playerHole" + playerTwoArray].removeEventListener(MouseEvent.MOUSE_DOWN, pickShell);				playPage["playerHole" + playerTwoArray].buttonMode = false;				playerOneArray++;				playerTwoArray++;				//trace(holeArray[i]);			}		}				private function disablePlayerHoleClick():void		{			//trace(isTurn);			if (isTurn)			{				for (var i:int = 0; i < 15; i++)				{					playPage["playerHole" + i].removeEventListener(MouseEvent.MOUSE_DOWN, pickShell);					playPage["playerHole" + i].buttonMode = false;				}			}		}				private function checkGameOver():void		{			var emptyPlayer1Hole:int = 0;			var emptyPlayer2Hole:int = 0;			//Function to checkGameOver condition			for (var i:int = 0; i < holeArray.length; i++)			{				if (holeArray[i] == 0)				{					if (i < 7)					{						emptyPlayer1Hole += 1;					}					else if (i > 7 && i < 15)					{						emptyPlayer2Hole += 1;					}				}			}			if (emptyPlayer1Hole == 7)			{				isWin = 1;			}			else if (emptyPlayer2Hole == 7)			{				isWin = 2;			}			if (isWin == 1)			{				removeChild(playPage);				addChild(gameOverPage);				gameOverPage.messageDisplay.text = "Game Over\nYou WIN";			}			else if (isWin == 2)			{				removeChild(playPage);				addChild(gameOverPage);				gameOverPage.messageDisplay.text = "Game Over\nYou LOSE";			}		}				private function onWinButtonClick(e:MouseEvent):void		{			for (var i:int = 0; i < holeArray.length; i++)			{				if (i < 7)				{					holeArray[i] = 0;				}			}			//checkGameOver();		}				private function onLoseButtonClick(e:MouseEvent):void		{			for (var i:int = 0; i < holeArray.length; i++)			{				if (i > 7 && i < 15)				{					holeArray[i] = 0;				}			}			//checkGameOver();		}	}}